#+title: Aabm's literate configuration for GNU Emacs
#+author: aabm
#+email: aabm@disroot.org
#+startup: overview
#+property: header-args :tangle init.el

* About

Yet another complete rewrite!

This is my =personal configuration for GNU Emacs=. It is
structured in a literate style, meaning it includes documentation and
code in the same file.

I use Emacs for lots of things. I write personal notes and documents
with it. I rely on it for my academic work. I read my mail in it. This
configuration sets that all up for me.

In line with the GNU philosophy, this configuration is entirely =free
software=. See the [[*License:~][License]] section in this file for more details.

This configuration is written with a few key guidelines in mind:

- Don't turn Emacs into a complex monstrosity
- When in doubt, always prefer the simpler implementation
- Try the defaults! They're there for a reason!
- Document all config choices!

Some of the major features and characteristics of this configuration
are:

** Package management with =straight.el= and =use-package=

While using a third party package manager like Straight instead of the
already built-in one may seem to violate the rules from before, I make
this choice for a very simple reason: it is easier to use than
=package.el=. The declarative package management style is clean and
effective, gives me very little trouble and works well with other
tools like =use-package=. I find myself much more comfortable with it,
as despite the technical complexity behind this solution, it adds no
mental overhead for the user.

* License

Copyright © 2019-2022 Aabm <aabm@disroot.org>

Author: Aabm <aabm@disroot.org>

Homepage: https://gitlab.com/aabm/emacs

This file is NOT part of GNU Emacs.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Emacs; see the file LICENSE.  If not, you can visit
https://www.gnu.org/licenses/gpl-3.0.html or write to the Free
Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
02110-1301, USA.

* Startup

Here we modify some things about Emacs' startup process, in order to
make it faster and set up some basic options that will later be used
by other packages.

** early-init.el

Here we define all the options to be included in the =early-init.el=
file. This file is loaded very early in the startup process, meaning
it can be used to modify and speed up startup.

*** File header

The license/package header for the =early-init.el= file.

#+begin_src emacs-lisp :tangle early-init.el
  ;;; early-init.el --- Emacs early configuration file
  ;; Copyright © 2019-2022 Aabm <aabm@disroot.org>

  ;; Author: Aabm <aabm@disroot.org>
  ;; Keywords: Emacs configuration, literate programming
  ;; Homepage: https://gitlab.com/aabm/emacs

  ;;; License:
  ;; This file is NOT part of GNU Emacs.

  ;; This program is free software; you can redistribute it and/or
  ;; modify it under the terms of the GNU General Public License as
  ;; published by the Free Software Foundation; either version 3, or (at
  ;; your option) any later version.

  ;; This program is distributed in the hope that it will be useful, but
  ;; WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  ;; General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with GNU Emacs; see the file LICENSE.  If not, you can visit
  ;; https://www.gnu.org/licenses/gpl-3.0.html or write to the Free
  ;; Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  ;; MA 02110-1301, USA.

  ;;; Commentary:
  ;; Aabm's early-init settings for Emacs.  This file has been
  ;; automatically generated by `org-babel'. Do not modify it, as your
  ;; changes might be overwritter. Instead, modify the `emacs.org' file.
#+end_src

*** Startup options hack

A fairly simple hack to speed up startup in Emacs. It works by
disabling garbage gollection and the file name handler while Emacs is
starting, and enables them back up once the startup process is
complete.

#+begin_src emacs-lisp :tangle early-init.el
  (defvar startup-file-name-handler-alist file-name-handler-alist)

  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6
        file-name-handler-alist nil)

  (defun startup-reset-defaults ()
    (setq gc-cons-threshold 16777216
          gc-cons-percentage 0.1
          file-name-handler-alist startup-file-name-handler-alist))

  (add-hook 'emacs-startup-hook #'startup-reset-defaults)
#+end_src

*** Disabling package.el

Here we disable =package.el=, the built-in package manager for
Emacs. We do this for two reasons:

1. it speeds up startup
2. we use a third-party package manager instead

For more on why use a different package management solution, see
the [[*About][About]] section.

#+begin_src emacs-lisp :tangle early-init.el
  (setq package-enable-at-startup nil
        package--init-file-ensured t)
#+end_src

*** Notify startup time

We enable a simple hook to print a message stating startup time and
garbage collection information right after startup. 

#+begin_src emacs-lisp :tangle early-init.el
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs ready in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract
                                 after-init-time
                                 before-init-time)))
                       gcs-done)))
#+end_src

** init.el
*** Header
    
The license/package header for the =init.el= file.

#+begin_src emacs-lisp
  ;;; init.el --- Main Emacs configuration file
  ;; Copyright © 2019-2022 Aabm <aabm@disroot.org>

  ;; Author: Aabm <aabm@disroot.org>
  ;; Keywords: literate programming, Emacs configuration
  ;; Homepage: https://gitlab.com/aabm/emacs

  ;;; License:
  ;; This file is NOT part of GNU Emacs.

  ;; This program is free software; you can redistribute it and/or
  ;; modify it under the terms of the GNU General Public License as
  ;; published by the Free Software Foundation; either version 3, or (at
  ;; your option) any later version.

  ;; This program is distributed in the hope that it will be useful, but
  ;; WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  ;; General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with GNU Emacs; see the file LICENSE.  If not, you can visit
  ;; https://www.gnu.org/licenses/gpl-3.0.html or write to the Free
  ;; Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  ;; MA 02110-1301, USA.

  ;;; Commentary:
  ;; Aabm's init settings for Emacs.
  ;; This file has been automatically generated by `org-babel'. Do not
  ;; modify it, as your changes might be overwritter. Instead, modify
  ;; the `emacs.org' file.
#+end_src

*** Check version

This configuration is made with the Emacs master branch in mind. While
it does not directly support older/stable releases, most of it should
work without issues on Emacs 27+. Here we check whether Emacs is up to
date enough, and if not, throw a warning.

#+begin_src emacs-lisp
  (when (version< emacs-version "27.1")
    (error "This requires Emacs 27.1 and above! Preferably 29 (master), but 27 should be fine..."))
#+end_src

*** Bootstrap straight.el

Here we bootstrap the =straight.el= package manager, which replaces
=package.el=. This requires that =git= be installed on the system. The
code here is the official method for installing straight, taken from
its [[https://github.com/emacsmirror/straight][github]].

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src
   
*** Installing and configuring use-package

In this section we install =use-package=, a collection of macros for
making package management easier and more convenient. It provides
great control over the process of loading and customizing packages. 

#+begin_src emacs-lisp
  (straight-use-package 'use-package)

  (setq use-package-always-ensure nil)
  (setq use-package-always-defer t)
  (setq use-package-hook-name-suffix nil)
#+end_src

*** Ensuring auto-compilation

Here we make sure Emacs prefers to load compiled files over uncompiled
source files. 

#+begin_src emacs-lisp
  (setq load-prefer-newer t)
#+end_src

* Quality of life

Small changes that make big differences!

** Disabling backup files

By default, Emacs litters your directories with backups of files
you edit. I find this behavior not only useless but also irritating.

#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+end_src

** Disabled commands

By default, Emacs has some commands "disabled". This means that, when
invoked, instead of being executed normally, they return a warning to
the user. This is because they are considered too advanced or
confusing for new users. Well I know my way around Emacs, so here we
get rid of this behavior.

#+begin_src emacs-lisp
  (setq disabled-command-function nil)
#+end_src

** Disabling GUI elements

Emacs comes with a few GUI elements I would rather get rid of. These
are:

- Tool, menu and scroll bars
- Graphical tooltips and dialog boxes
- The bell ring

Here we disable them.

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (tooltip-mode -1)
  (setq use-dialog-box nil)
  
  (setq ring-bell-function 'ignore)
#+end_src

* Minibuffer

The Emacs minibuffer is a surprisingly powerful tool. Here we improve
its completion capabilities as well as its interface.

#+begin_src emacs-lisp
  (setq completion-styles '(substring flex shorthand initials))
  (setq completion-ignore-case t)
  (setq read-file-name-completion-ignore-case t)
  (setq read-buffer-completion-ignore-case t)
  (setq enable-recursive-minibuffers t)

  (icomplete-mode t)
  (icomplete-vertical-mode t)
#+end_src

* Writing
** Auto Fill

When dealing with plain text, I like having my lines automatically
wrapped to a certain threshold. Here we make it so that
=auto-fill-mode= is used in all plain text editing modes.

#+begin_src emacs-lisp
  (add-hook 'text-mode-hook #'auto-fill-mode)
#+end_src
 
** Parens, brackets and quotes
*** Electric pairs

Electric pairs make it so that any opening characters you type
(parentheses, braces, brackets, quotation marks) are automatically
matched with their corresponding closing character. This is handy at all
times when editing, but especially useful for programming in Lisp.

#+begin_src emacs-lisp
  (setq electric-pair-pairs '((?\{ . ?\})
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")))
  (electric-pair-mode t)
#+end_src

*** Highlight matching parentheses

This minor mode highlights the parentheses corresponding to the one
under/behind point. Useful for Lisp programming.

#+begin_src emacs-lisp
  (show-paren-mode t)
#+end_src
 
** Casing and capitalization

Here we replace the normal capitalization functions with their
more flexible useful =dwim= counterparts.

#+begin_src emacs-lisp
  (global-set-key (kbd "M-c") 'capitalize-dwim)
  (global-set-key (kbd "M-u") 'upcase-dwim)
  (global-set-key (kbd "M-l") 'downcase-dwim)
#+end_src

** Sentence navigation

A nice tweak to sentence navigation commands that makes them more
usable. We change the definition of a sentence to a more reasonable
"something that ends in a single space after punctuation", instead of
the normal double space. This is superior as quite literally no one
double spaces sentences in ~'(current-year)~.
   
#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
#+end_src

** Whitespace and indentation

Here we set up some useful keys for handling whitespace and
indentation. =indent-region= is normally bound to C-M-\, which I find
to be too complex of a keybinding for a function I use so frequently.

#+begin_src emacs-lisp
  (global-set-key (kbd "M-SPC") 'cycle-spacing) 

  (global-set-key (kbd "C-\\") 'indent-region)
#+end_src

* Reading
** PDFs

Here we install the =pdf-tools= package, which provides a nice PDF
reader inside Emacs. It appears here as a replacement for the built-in
=docview=, which is quite clunky. I find it very convenient to be able
to read PDFs from within Emacs, even if the experience is not as good
as that of a dedicated PDF reader.

#+begin_src emacs-lisp
  (use-package pdf-tools
    :straight t
    :init
    (pdf-loader-install)
    :custom
    (pdf-view-resize-factor 1.1)
    (pdf-view-continuous nil)
    (pdf-view-display-size 'fit-page)
    :bind
    (:map pdf-view-mode-map
	  (("M-g g" . pdf-view-goto-page))))
#+end_src

* Appearance
** Font

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Iosevka 11"))
#+end_src

** Theme

#+begin_src emacs-lisp
  (load-theme 'modus-vivendi t)
#+end_src

