#+title: Aabm's literate configuration for GNU Emacs
#+author: aabm
#+email: aabm@disroot.org
#+startup: overview
#+property: header-args :tangle init.el

* About

Yet another complete rewrite!

This is my =personal configuration for GNU Emacs=. It is
structured in a literate style, meaning it includes documentation and
code in the same file.

I use Emacs for lots of things. I write personal notes and documents
with it. I rely on it for my academic work. I read my mail in it. This
configuration sets that all up for me.

In line with the GNU philosophy, this configuration is entirely =free
software=. See the [[*License:~][License]] section in this file for more details.

This configuration is written with a few key guidelines in mind:

- Don't turn Emacs into a complex monstrosity
- When in doubt, always prefer the simpler implementation
- Try the defaults! They're there for a reason!
- Document all config choices!

Some of the major features and characteristics of this configuration
are:

** Package management with =straight.el= and =use-package=

While using a third party package manager like Straight instead of the
already built-in one may seem to violate the rules from before, I make
this choice for a very simple reason: it is easier to use than
=package.el=. The declarative package management style is clean and
effective, gives me very little trouble and works well with other
tools like =use-package=. I find myself much more comfortable with it,
as despite the technical complexity behind this solution, it adds no
mental overhead for the user.

* License

Copyright © 2019-2022 Aabm <aabm@disroot.org>

Author: Aabm <aabm@disroot.org>

Homepage: https://gitlab.com/aabm/emacs

This file is NOT part of GNU Emacs.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Emacs; see the file LICENSE.  If not, you can visit
https://www.gnu.org/licenses/gpl-3.0.html or write to the Free
Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
02110-1301, USA.

* Startup

Here we modify some things about Emacs' startup process, in order to
make it faster and set up some basic options that will later be used
by other packages.

** early-init.el

Here we define all the options to be included in the =early-init.el=
file. This file is loaded very early in the startup process, meaning
it can be used to modify and speed up startup.

*** File header

The license/package header for the =early-init.el= file.

#+begin_src emacs-lisp :tangle early-init.el
  ;;; early-init.el --- Emacs early configuration file
  ;; Copyright © 2019-2022 Aabm <aabm@disroot.org>

  ;; Author: Aabm <aabm@disroot.org>
  ;; Keywords: Emacs configuration, literate programming
  ;; Homepage: https://gitlab.com/aabm/emacs

  ;;; License:
  ;; This file is NOT part of GNU Emacs.

  ;; This program is free software; you can redistribute it and/or
  ;; modify it under the terms of the GNU General Public License as
  ;; published by the Free Software Foundation; either version 3, or (at
  ;; your option) any later version.

  ;; This program is distributed in the hope that it will be useful, but
  ;; WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  ;; General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with GNU Emacs; see the file LICENSE.  If not, you can visit
  ;; https://www.gnu.org/licenses/gpl-3.0.html or write to the Free
  ;; Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  ;; MA 02110-1301, USA.

  ;;; Commentary:
  ;; Aabm's early-init settings for Emacs.  This file has been
  ;; automatically generated by `org-babel'. Do not modify it, as your
  ;; changes might be overwritten. Instead, modify the `emacs.org' file.
#+end_src

*** Startup options hack

A fairly simple hack to speed up startup in Emacs. It works by
disabling garbage gollection and the file name handler while Emacs is
starting, and enables them back up once the startup process is
complete.

#+begin_src emacs-lisp :tangle early-init.el
  (defvar startup-file-name-handler-alist file-name-handler-alist)

  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6
        file-name-handler-alist nil)

  (defun startup-reset-defaults ()
    (setq gc-cons-threshold 16777216
          gc-cons-percentage 0.1
          file-name-handler-alist startup-file-name-handler-alist))

  (add-hook 'emacs-startup-hook #'startup-reset-defaults)
#+end_src

*** Disabling package.el

Here we disable =package.el=, the built-in package manager for
Emacs. We do this for two reasons:

1. it speeds up startup
2. we use a third-party package manager instead

For more on why use a different package management solution, see
the [[*About][About]] section.

#+begin_src emacs-lisp :tangle early-init.el
  (setq package-enable-at-startup nil
        package--init-file-ensured t)
#+end_src

*** Notify startup time

We enable a simple hook to print a message stating startup time and
garbage collection information right after startup. 

#+begin_src emacs-lisp :tangle early-init.el
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs ready in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract
                                 after-init-time
                                 before-init-time)))
                       gcs-done)))
#+end_src

** init.el
*** Header
    
The license/package header for the =init.el= file.

#+begin_src emacs-lisp
  ;;; init.el --- Main Emacs configuration file
  ;; Copyright © 2019-2022 Aabm <aabm@disroot.org>

  ;; Author: Aabm <aabm@disroot.org>
  ;; Keywords: literate programming, Emacs configuration
  ;; Homepage: https://gitlab.com/aabm/emacs

  ;;; License:
  ;; This file is NOT part of GNU Emacs.

  ;; This program is free software; you can redistribute it and/or
  ;; modify it under the terms of the GNU General Public License as
  ;; published by the Free Software Foundation; either version 3, or (at
  ;; your option) any later version.

  ;; This program is distributed in the hope that it will be useful, but
  ;; WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  ;; General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with GNU Emacs; see the file LICENSE.  If not, you can visit
  ;; https://www.gnu.org/licenses/gpl-3.0.html or write to the Free
  ;; Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  ;; MA 02110-1301, USA.

  ;;; Commentary:
  ;; Aabm's init settings for Emacs.
  ;; This file has been automatically generated by `org-babel'. Do not
  ;; modify it, as your changes might be overwritten. Instead, modify
  ;; the `emacs.org' file.
#+end_src

*** Check version

This configuration is made with the Emacs master branch in mind. While
it does not directly support older/stable releases, most of it should
work without issues on Emacs 27+. Here we check whether Emacs is up to
date enough, and if not, throw a warning.

#+begin_src emacs-lisp
  (when (version< emacs-version "27.1")
    (error "This requires Emacs 27.1 and above! Preferably 29 (master), but 27 should be fine..."))
#+end_src

*** Bootstrap straight.el

Here we bootstrap the =straight.el= package manager, which replaces
=package.el=. This requires that =git= be installed on the system. The
code here is the official method for installing straight, taken from
its [[https://github.com/emacsmirror/straight][github]].

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src
   
*** Installing and configuring use-package

In this section we install =use-package=, a collection of macros for
making package management easier and more convenient. It provides
great control over the process of loading and customizing packages. 

#+begin_src emacs-lisp
  (straight-use-package 'use-package)

  (setq use-package-always-ensure nil)
  (setq use-package-always-defer t)
  (setq use-package-hook-name-suffix nil)
#+end_src

*** Additions to use-package

Here we install the =diminish= package. By integrating with
=use-package= macros, =diminish= allows one to hide certain minor
modes from the modeline.

#+begin_src emacs-lisp
  (straight-use-package 'diminish)
#+end_src

*** Ensuring auto-compilation

Here we make sure Emacs prefers to load compiled files over uncompiled
source files. 

#+begin_src emacs-lisp
  (setq load-prefer-newer t)
#+end_src

*** Load user credentials

This bit of code makes Emacs load my personal credentials file on
startup. This file contains personal information including my name,
address, email address, and so on. This information is used by various
packages inside Emacs, most importantly the email system. The contents
of the file are minimal, but are kept separate from the main
configuration file so that distribution of this configuration does not
leak any personal information about myself.

#+begin_src emacs-lisp
  (load-file (expand-file-name "personal/auth.el" user-emacs-directory))
#+end_src

If you wish to use the above setting, simply create a file in the
appropriate path with the name "creds.el.gpg" containing something
like the example below:

#+begin_src emacs-lisp :tangle no
  (setq user-full-name "Your Name Here"
        user-mail-address "your@email.here"
        calendar-latitude 00.00
        calendar-longitude 000.00
        calendar-location-name "City, State")
#+end_src

* Quality of life

Small changes that make big differences!

** Disabling backup files

By default, Emacs litters your directories with backups of files
you edit. I find this behavior not only useless but also irritating.

#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+end_src

** Disabled commands

By default, Emacs has some commands "disabled". This means that, when
invoked, instead of being executed normally, they return a warning to
the user. This is because they are considered too advanced or
confusing for new users. Well I know my way around Emacs, so here we
get rid of this behavior.

#+begin_src emacs-lisp
  (setq disabled-command-function nil)
#+end_src

** Disable startup messages

This disables the default startup screen. I would rather just start in
the scratch buffer.

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src

** Disabling GUI elements

Emacs comes with a few GUI elements I would rather get rid of. These
are:

- Tool, menu and scroll bars
- Graphical tooltips and dialog boxes
- The bell ring

Here we disable them.

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (tooltip-mode -1)
  (setq use-dialog-box nil)
  
  (setq ring-bell-function 'ignore)
#+end_src

** Auto revert

Enabling the following minor mode makes Emacs automatically account
for changes in visited files. We enable this feature for other buffers
such as =dired= buffers as well.

#+begin_src emacs-lisp
  (global-auto-revert-mode t)
  (setq global-auto-revert-non-file-buffers t)
#+end_src

** Yes or No prompts

Emacs has a lot of prompts asking for user confirmation that require
you to type in "yes" everytime. This replaces the default "yes or no"
prompt function with one that makes simple "y" or "n" sufficient.

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

* Minibuffer
** Which Key

The =which-key= package uses the minibuffer to display all active
keybindings in the currently typed prefix. It allows you to navigate
your keybindings via prefixes. Nice for when you forget those
cryptically long keychord sequences.

#+begin_src emacs-lisp
  (use-package which-key
    :straight t
    :diminish which-key-mode
    :init
    (which-key-mode)
    :custom
    (which-key-idle-delay 0.4))
#+end_src

** Completion and interface

The Emacs minibuffer is a surprisingly powerful tool. Here we improve
its completion capabilities as well as its interface.

The packages introduced here are:

- =orderless=, a more advanced completion style, which I find provides
  a better matching experience. So much better, in fact, that we use
  it as the only completion style.
  
- =vertico=, which provides a completion interface similar to Ivy or
  Helm, that is, vertically ordered and which can be navigated by
  pressing C-n and C-p.

- =consult=, which provides advanced completion functions, improving
  upon already existing uses. Powerful functions for switching
  buffers, finding bookmarks, searching files, etc.

- =embark=, which allows one to perform arbitrary actions on
  minibuffer candidates

- =marginalia=, which displays handy extra information in the
  minibuffer.

#+begin_src emacs-lisp
  (straight-use-package 'orderless)

  (use-package vertico
    :straight t
    :init
    (vertico-mode)
    :custom
    (completion-styles '(substring orderless))
    (completion-ignore-case t)
    (read-file-name-completion-ignore-case t)
    (read-buffer-completion-ignore-case t)
    (enable-recursive-minibuffers t))

  (use-package consult
    :straight t
    :custom
    (consult-narrow-key "<")
    :bind
    (("M-y" . consult-yank-replace)
     ("C-x b" . consult-buffer)
     ("M-g g" . consult-grep)
     ("M-g o" . consult-outline)
     ("M-g m" . consult-mark)
     ("M-g M-g" . consult-goto-line)
     ("M-g s" . consult-line)
     ("M-g f" . consult-file-externally)))

  (use-package embark
    :straight t
    :bind
    (("C-," . embark-act))
    :custom
    (embark-action-indicator
     (lambda (map &optional _target)
       (which-key--show-keymap "Embark" map nil nil 'no-paging)
       #'which-key--hide-popup-ignore-command)
     embark-become-indicator embark-action-indicator))

  (use-package marginalia
    :straight t
    :init
    (marginalia-mode)
    :bind
    ((:map minibuffer-local-map
	   ("M-a" . marginalia-cycle))))
#+end_src

* Writing

All packages and settings relating to writing, from simple text
editing features to complex modes like Org.

** Text editing features
*** Auto Fill

When dealing with plain text, I like having my lines automatically
wrapped to a certain threshold. Here we make it so that
=auto-fill-mode= is used in all plain text editing modes.

#+begin_src emacs-lisp
  (add-hook 'text-mode-hook #'auto-fill-mode)
  (diminish 'auto-fill-function)
#+end_src
 
*** Parens, brackets and quotes
**** Electric pairs

Electric pairs make it so that any opening characters you type
(parentheses, braces, brackets, quotation marks) are automatically
matched with their corresponding closing character. This is handy at all
times when editing, but especially useful for programming in Lisp.

#+begin_src emacs-lisp
  (setq electric-pair-pairs '((?\{ . ?\})
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")))
  (electric-pair-mode t)
#+end_src

**** Highlight matching parentheses

This minor mode highlights the parentheses corresponding to the one
under/behind point. Useful for Lisp programming.

#+begin_src emacs-lisp
  (show-paren-mode t)
#+end_src
 
*** Casing and capitalization

Here we replace the normal capitalization functions with their
more flexible useful =dwim= counterparts.

#+begin_src emacs-lisp
  (global-set-key (kbd "M-c") 'capitalize-dwim)
  (global-set-key (kbd "M-u") 'upcase-dwim)
  (global-set-key (kbd "M-l") 'downcase-dwim)
#+end_src

*** Sentence navigation

A nice tweak to sentence navigation commands that makes them more
usable. We change the definition of a sentence to a more reasonable
"something that ends in a single space after punctuation", instead of
the normal double space. This is superior as quite literally no one
double spaces sentences in ~'(current-year)~.
   
#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
#+end_src

*** Whitespace and indentation

Here we set up some useful keys for handling whitespace and
indentation. =indent-region= is normally bound to C-M-\, which I find
to be too complex of a keybinding for a function I use so frequently.

#+begin_src emacs-lisp
  (global-set-key (kbd "M-SPC") 'cycle-spacing) 

  (global-set-key (kbd "C-\\") 'indent-region)
#+end_src

*** Point position

Enabling the following minor modes makes it so that the position of
point is always displayed in the modeline, as coordinates.

#+begin_src emacs-lisp
  (line-number-mode t)
  (column-number-mode t)
#+end_src

*** Expand region

A neat little package that allows marking a region in increasing
bounds with each call. Think of this as a more dynamic version of
Vim's "inside" or "around" commands such as =di(=. Useful for
selecting things inside parentheses, like in Lisp code, or quotes in
prose.

#+begin_src emacs-lisp
  (use-package expand-region
    :straight t
    :bind
    (("C-=" . er/expand-region)))
#+end_src

** Org Mode
*** Editing code blocks

Here we make it so that editing a code block is done in the current
window.

#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

*** Navigating headings

Some settings which make handling Org headings easier: first we make
it so that headings are wrapped by default and that pressing TAB at
the file header cycles all headings. Then we add some convenient
keybindings that allow us to avoid pressing the arrow keys too much.

#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-cycle-global-at-bob t)
    (org-startup-folded t)
    :bind
    (:map org-mode-map
	  (("M-n" . org-forward-element)
	   ("M-p" . org-backward-element)
	   ("C-M-n" . org-metadown)
	   ("C-M-p" . org-metaup)
	   ("C-M-f" . org-metaright)
	   ("C-M-b" . org-metaleft)
	   ("C-c C-x l" . org-cycle-list-bullet))))
#+end_src

*** Capture

With =org-capture= I can quickly store thoughts in plain text files. I
use this for my agenda and TODO lists as well as my personal journal.

#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-capture-templates
     '(("j" "Journal entry"
	entry
	(file+datetree "agenda/journal.org")
	"* %?"
	:empty-lines 1)))
    :bind
    (("C-c w" . org-capture)))
#+end_src

*** Custom bullets

To make Org look a bit nicer, we use the =org-superstar= package. This
replaces the heading asterisks with custom UTF-8 bullet characters.

#+begin_src emacs-lisp
  (use-package org-superstar
    :straight t
    :custom
    (org-hide-leading-stars nil)
    :hook
    (org-mode-hook . org-superstar-mode))
#+end_src

*** Org Roam

=org-roam= is a very powerful extension to org-mode. Essentially, it
is a package that maintains a relational database of links between
files, and allows navigation of this database using links and
backlinks. Org Roam is made as a tool for notetaking following the
=zettelkasten= method. It is incredibly useful tool. I personally
treat it as a second brain, in which I store all the information I
would like to later recall.

We also install =org-roam-ui=, which runs a local web server for
displaying a visual representation of links between notes. It's quite
fancy.

#+begin_src emacs-lisp
  (use-package org-roam
    :straight t
    :init
    (setq org-roam-directory "~/org/roam/")
    (setq org-roam-v2-ack t)
    :config
    (org-roam-setup)
    :custom
    (org-roam-db-location
     (expand-file-name "roam.db" org-roam-directory))
    (org-roam-capture-templates
     '(("d" "default" plain "%?"
	:if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			   "#+title: ${title}\n#+date: %t\n#+filetags: \n")
	:unnarrowed t)))
    (org-capture-bookmark nil)
    (org-roam-db-update-on-save t)
    :bind
    (("C-c n f" . org-roam-node-find)
     ("C-c n i" . org-roam-node-insert)
     ("C-c n l" . org-roam-buffer-toggle)
     ("C-c n w" . org-roam-capture)
     ("C-c n o" . org-roam-buffer-display-dedicated)
     ("C-c n c" . org-id-get-create)
     ("C-c n a" . org-roam-alias-add)
     ("C-c n u" . org-roam-db-sync)))

  (use-package org-roam-ui
    :straight
    (:host github :repo "org-roam/org-roam-ui"
	   :branch "main" :files ("*.el" "out"))
      :after org-roam
      :custom
      (org-roam-ui-sync-theme t)
      (org-roam-ui-follow t)
      (org-roam-ui-update-on-save t)
      (org-roam-ui-open-on-start t)
      :bind
      (("C-c n g" . org-roam-ui-mode)))
#+end_src

* Reading
** Olivetti

=olivetti-mode= is a minor mode which centers text on the screen.
Simple as.

#+begin_src emacs-lisp
  (use-package olivetti
    :straight t
    :custom
    (olivetti-body-width 0.7)
    :bind
    (("C-c o" . olivetti-mode)))
#+end_src

** PDFs

Here we install the =pdf-tools= package, which provides a nice PDF
reader inside Emacs. It appears here as a replacement for the built-in
=docview=, which is quite clunky. I find it very convenient to be able
to read PDFs from within Emacs, even if the experience is not as good
as that of a dedicated PDF reader.

#+begin_src emacs-lisp
  (use-package pdf-tools
    :straight t
    :init
    (pdf-loader-install)
    :custom
    (pdf-view-resize-factor 1.1)
    (pdf-view-continuous nil)
    (pdf-view-display-size 'fit-page)
    :bind
    (:map pdf-view-mode-map
	  (("M-g g" . pdf-view-goto-page))))
#+end_src

* Mail

I like using Emacs as a mail reader. Here we set up basic email
funcionality and the =mu4e= interface.

** General

Here we include global, client-independent settings for Email in
Emacs, such as usage of the external program =msmtp= for sending mail.
Emacs is capable of sending mail on its own, but it is quite slow, so
we instead opt for an external, more universal tool.

#+begin_src emacs-lisp
  (setq message-send-mail-function 'message-send-mail-with-sendmail)
  (setq sendmail-program "/usr/bin/msmtp")
  (setq message-sendmail-extra-arguments '("--read-envelope-from"))
  (setq message-sendmail-f-is-evil 't)
#+end_src

** mu4e

=mu4e= is a mail client for Emacs. It has a fairly simple UI and is
easy to get into, at least compared to Gnus. It requires use of an
external tool such as =isync= for keeping your mailbox synced.
   
This is here as a temporary measure: I have this mu4e configuration
from before I nuked my entire Emacs config. Since doing that, I've
been planning on switching to Gnus, but for now I'll keep =mu4e=
around for its ease of use.

=Note=: This is currently here for legacy purposes. I'm undergoing a
move towards Gnus or Notmuch as my mail reader. See the configuration
for those below.

#+begin_src emacs-lisp
  (use-package mu4e
    :straight t
    :commands mu4e mu4e-compose-new
    :custom
    (mail-user-agent 'mu4e-user-agent)
    (mu4e-maildir "~/.mail/disroot/")
    (mu4e-get-mail-command "/usr/bin/mbsync -a")
    (mu4e-update-mail-and-index t)
    (mu4e-update-interval 300)
    (mu4e-view-show-images t)
    (mu4e-view-show-addresses t)
    (mu4e-use-fancy-chars nil)
    (mu4e-drafts-folder "/drafts")
    (mu4e-sent-folder "/sent")
    (mu4e-trash-folder "/trash")
    (message-send-mail-function 'message-send-mail-with-sendmail)
    (sendmail-program "/usr/bin/msmtp")
    (message-sendmail-extra-arguments '("--read-envelope-from"))
    (message-sendmail-f-is-evil t)
    (mu4e-completing-read-function 'completing-read)
    (mu4e-confirm-quit nil)
    (message-kill-buffer-on-exit t)
    (mu4e-attachment-dir "~/")
    (mu4e-compose-signature
     '(user-full-name))
    :hook
    (message-send-hook .
		       (lambda ()
			 (unless (yes-or-no-p "Sure you want to send this?")
			   (signal 'quit nil))))
    :bind
    ((("C-c m" . mu4e)
      ("C-x m" . mu4e-compose-new))))
#+end_src

* Projects

Settings and packages for managing files, projects and version
control.

** vc

=vc= is Emacs' built-in tool for interfacing with version control
systems. By default it is system agnostic - it works with =git=,
=mercurial=, and various others.

The main addition here is a custom function, =vc-git-log-grep=. It
prompts the user for a string, and searches it through the git log,
returning valid commit logs.

#+begin_src emacs-lisp
  (use-package vc
    :config
    (defvar vc-shell-output "*vc-output*")
    (defun vc-git-log-grep (pattern &optional diff)
      "Run ’git log --grep’ for PATTERN.
      With optional DIFF as a prefix (\\[universal-argument])
      argument, also show the corresponding diffs. 

    This function was taken from prot."
      (interactive
       (list (read-regexp "Search git log for PATTERN: ")
	     current-prefix-arg))
      (let* ((buf-name vc-shell-output)
	     (buf (get-buffer-create buf-name))
	     (diffs (if diff "-p" ""))
	     (type (if diff 'with-diff 'log-search))
	     (resize-mini-windows nil))
	(shell-command (format "git log %s --grep=%s -i -E --" diffs pattern) buf)
	(with-current-buffer buf
	  (setq-local vc-log-view-type type)
	  (setq-local revert-buffer-function nil)
	  (vc-git-region-history-mode))))
    :bind
    (:map vc-prefix-map
	  (("S" . vc-git-log-grep))))
#+end_src

** Magit

A powerful git porcelain, and a very famous "killer app" for Emacs. It
is indeed very powerful, but sometimes I find its UI gets in the way a
bit. I keep it for those times when =vc= simply won't do.

#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :commands
    (magit-status magit)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    :config
    (defun magit-commit-all ()
      (interactive)
      (start-process-shell-command
       "" nil "git add .")
      (magit-commit-create))
    :bind
    (("C-x g" . magit-status)
     ("C-x v c" . magit-commit-all)
     ("C-x v P" . magit-push-current-to-pushremote)))
#+end_src

** Dired

Big changes to =dired= behavior. First we change the flags it passes
to the =ls= command, which in turn gives us better output to work
with, like having directories be listed before regular files. Then we
add other QoL changes, like faster copying and moving, as well as
easier changing of permissions when in writeable dired mode.

I also add a function for opening just about any file from dired using
its respective program, via =xdg-open=. This way you can open videos
with an external video player and images with a proper image viewer.

We also add some extra packages. First is =dired-hide-dotfiles-mode=,
which does what the name suggests. It can be toggled by pressing =h=.

#+begin_src emacs-lisp
  (use-package dired
    :custom
    (dired-listing-switches "-alhNF --group-directories-first")
    (dired-dwim-target t)
    (wdired-allow-to-change-permissions t)
    :config
    (defun dired-xdg-open ()
      "Open the marked files using xdg-open."
      (interactive)
      (let ((file-list (dired-get-marked-files)))
	(mapc
	 (lambda (file-path)
	   (let ((process-connection-type nil))
	     (start-process "" nil "xdg-open" file-path)))
	 file-list)))
    :bind
    (:map dired-mode-map
	  (("v" . dired-xdg-open)
	   ("l" . dired-up-directory))))

  (use-package dired-hide-dotfiles
    :straight t
    :diminish dired-hide-dotfiles-mode
    :hook
    ((dired-mode-hook . dired-hide-dotfiles-mode))
    :bind
    (:map dired-mode-map
	  (("h" . dired-hide-dotfiles-mode))))
#+end_src

* Utilities
** Display time on the modeline

I like having a little clock on my modeline for those fullscreen
writing and reading sessions. 

#+begin_src emacs-lisp
  (use-package time
    :init
    (display-time-mode)
    :custom
    (display-time-format "%a, %b %d %H:%M")
    (display-time-default-load-average nil))
#+end_src

** World Clock

I like having access to the =world-clock=. Here we set up a little
list of locations I would sometimes like to know the time for.

#+begin_src emacs-lisp
  (use-package time
    :custom
    (world-clock-list
     '(("America/Los_Angeles" "Seattle")
       ("America/New_York" "New York")
       ("America/Sao_Paulo" "São Paulo")
       ("Europe/London" "London")
       ("Europe/Paris" "Paris")
       ("Africa/Cairo" "Cairo")
       ("Asia/Baghdad" "Baghdad")
       ("Asia/Dushanbe" "Malé")
       ("Asia/Beijing" "Beijing"))))
#+end_src

* Buffers and windows
** Ibuffer

=Ibuffer= is an interface for managing buffers, not too different from
what =dired= does for files. We replace the default =list-buffers=
with it.

We also install the =ibuffer-project= package which provides
integration with the built-in =project.el= library. This makes ibuffer
group buffers based on the projects they belong to.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)

  (use-package ibuffer-project
    :straight t
    :hook
    (ibuffer-mode-hook . (lambda ()
			   (setq ibuffer-filter-groups
				 (ibuffer-project-generate-filter-groups)))))
#+end_src

** Easier window switching

A few commands for easier window switching! First, a better keybinding
for the common =other-window= command. Then, we replace the basic
window splitting functions for versions which automatically switch to
the newly created windows.

#+begin_src emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)

  (defun split-window-below-and-switch ()
    "A simple replacement for `split-window-below', which automatically focuses the new window."
    (interactive)
    (split-window-below)
    (other-window 1))

  (defun split-window-right-and-switch ()
    "A simple replacement for `split-window-right', which automatically focuses the new window."
    (interactive)
    (split-window-right)
    (other-window 1))

  (global-set-key (kbd "C-x 2") 'split-window-below-and-switch)
  (global-set-key (kbd "C-x 3") 'split-window-right-and-switch)
#+end_src

* Appearance
** Font

I like the Iosevka font.

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Iosevka 11"))
  (set-frame-font "Iosevka 11" nil t)
#+end_src

** Theme

Here we install =doom-themes=, the theme pack from Doom Emacs, and
enable my preferred theme, =doom-Iosvkem=.

#+begin_src emacs-lisp
  (use-package doom-themes
    :straight t)

  (load-theme 'doom-Iosvkem t)
#+end_src

** Transparency

Make the frame a little transparent.

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(alpha 97 95))
  (set-frame-parameter (selected-frame) 'alpha '(97 95))
#+end_src

